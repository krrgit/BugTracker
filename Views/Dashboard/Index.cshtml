@using BugTracker.Data.Enum;
@using BugTracker.Extensions;
@using BugTracker.ViewModels;
@model DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}
<div class="d-flex flex-column">
<div>
<h2>Dashboard</h2>
</div>
<hr/> 

<div class="row">
<!-- Tickets -->
     <div class="col-9">
     <h3>Tickets</h3>

	<!--Header-->
    @for(int i=0;i<Model.TicketLists.Count;++i) {
    <div class="list-group mb-3">
                <a class="list-group-item disabled">
            <div class="d-flex gap-2 w-100 justify-content-between">
                <div>
                    <h5 class="mb-0">@Model.ProjectTitles[i]</h5>
                </div>
            </div>
        </a>
        <!--Tickets List-->
                    @foreach (var item in Model.TicketLists[i])
                    {
                            <input type="hidden" name="id" value="@item.Id" />
                                <a  asp-controller="Ticket" asp-action="Detail" asp-route-id="@item.Id" class="list-group-item list-group-item-action d-flex gap-3 py-2" aria-current="true">
                            @*<img src="https://github.com/twbs.png" alt="twbs" width="32" height="32" class="rounded-circle flex-shrink-0">*@
                            <div class="d-flex gap-2 w-100 justify-content-between">
                                <div>
                                    <h6 class="mb-2">
                                        <div> 
                                            <span class="badge bg-black">@(((TicketType)item.Type).GetDescription())</span>
                                            <p class="h5 d-inline">@item.Title</p>
                                            <span class="badge bg-@item.Priority.Value">@item.Priority</span>
                                            <span class="badge bg-@item.Status.Value">@(((TicketStatus)item.Status).GetDescription())</span>
                                        </div>
                                    </h6>
                                    <small class="mb-1 opacity-75">@item.Description.Truncate(100)</small>
                                    <div class="d-flex flex-row">
                                        @if (item.Author != null)
                                        {
                                            <small class="mx-0 mb-0 opacity-75">Posted by: @item.Author.FullName()</small>
                                        }
                                        else
                                        {
                                                        <small class="mx-0 mb-0 opacity-75">Posted by: </small>
                                        }
                                        </div>
                                </div>
                                        <div class="d-flex align-items-end flex-column">
                                    <div><small class="opacity-50 text-nowrap">@item.UpdatedAt</small></div>
                                    <!-- Ticket Buttons-->
                                        <div class="btn-group justify-content-end" role="group" aria-label="Basic example">
                                            <form method="get" action="@Url.Action("Edit", "Ticket")" class="form-check-inline p-0 mx-0">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <input type="submit" class="btn btn-secondary btn-sm" class="form-check-inline p-0 mx-0" value="Edit">
                                            </form>
                                            <form method="get" action="@Url.Action("Delete", "Ticket")" class="form-check-inline p-0 mx-0">
                                                <input type="hidden" name="id[0]" value="@item.Id" />
                                                <input type="hidden" name="id[1]" value="@item.ProjectId" />
                                                <input type="submit" class="btn btn-danger btn-sm" class="form-check-inline p-0 mx-0" value="Delete">
                                            </form>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
        </div>
        }
</div>

<!-- Progress -->
<div class="col-3">
<h3>Progress</h3>
<div class="align-self-center" id="chartBox">
    <canvas id="doughnut-chart" width="800" height="450"></canvas>
</div>
<hr/>
 <a asp-controller="Project" asp-action="Create" class="btn btn-primary d-inline">Create New Project</a>
</>

@{//<canvas id="bar-chart" width="800" height="450"></canvas> 
}

<style>
    #customLegend ul {
        display: flex;
        flex-direction: column;
        margin: 0;
        padding: 0;
    }

    #customLegend ul li {
        display: flex;
        align-items: center;
        cursor: pointer;
        flex-direction: row;
        margin-bottom: 5px;
        line-height: 22px;
    }

    #customLegend ul li span {
        display: inline-block;
        height: 20px;
        width: 20px;
        margin-right: 10px;
    }

    #customLegend ul li p {
        margin: 0;
        padding: 0;
        color: rgba(102,102,102,1);
    }

    #customLegend ul li.dim p {
        margin: 0;
        padding: 0;
        color: rgba(102,102,102,0.5);
    }




</style>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>
    $(document).ready(function() {
        // Doughnut Chart
        const myChart = new Chart(document.getElementById("doughnut-chart"), {
            type: 'doughnut',
            data: {
              labels: ["Resolved", "New", "Open", "In Progress", "Additional Info Required"],
              datasets: [
                    @for (int i=0;i<Model.ProjectProgress.Count;++i)
                    {
                        var item = Model.ProjectProgress[i];
                        var isHidden = i == 0 ? "true" : "false";
                        <text>
                        {
                            label: 'Tickets',
                                    backgroundColor: ['@Model.ProjectColors[i]', '#f3f3f3','#f3f3f3','#f3f3f3', '#f3f3f3'],
                            data: [@item[0], @item[1], @item[2], @item[3], @item[4]],
                            hidden: false,
                        },
                        </text>
                    }
              ]
            },
            options: {
                labels: {
                    display: false
                },
                legend: {
                    display: false
                 },
              title: {
                display: false,
                text: 'Project Task Progress'
              }
            },
            plugins: [{
                    id: 'text',
                    beforeDraw: function(chart, a, b) {
                    // get values
                    var resolved = 0;
                    var total = 0;

                    // Sum all tickets and resolved tickets
                    myChart.data.datasets.forEach((dataset) => {
                        if (!dataset.hidden) {
                            resolved += dataset.data[0];
                            dataset.data.forEach((value) => {
                                total += value;
                            });
                        }
                    });

                    var percentage = (100 * resolved/total).toFixed(0);

                    // Draw Percentage
                    var width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;

                    ctx.restore();
                    var fontSize = (height / 150).toFixed(2);
                    ctx.font = fontSize + "em sans-serif";
                    ctx.textBaseline = "middle";

                    var text = percentage + "%",
                    textX = Math.round((width - ctx.measureText(text).width) / 2),
                    textY = height * 1.15 / 2;

                    ctx.fillStyle = "#000000";

                    ctx.fillText(text, textX, textY);
                    ctx.save();

                    // Draw numer / denom
                    ctx.fillStyle = "#666666";
                    fontSize = (height / 275).toFixed(2);
                    ctx.font = "525 " + fontSize + "em sans-serif";
                    text = resolved + "/" + total;
                    textX = Math.round((width - ctx.measureText(text).width) / 2),
                    textY = height * 1.33 / 2;

                    ctx.fillText(text, textX, textY);
                    ctx.save();

                    // Draw Resolved
                    ctx.fillStyle = "#000000";
                    fontSize = (height / 350).toFixed(2);
                    ctx.font = "550 " + fontSize + "em sans-serif";
                    text = "Resolved";
                    textX = Math.round((width - ctx.measureText(text).width) / 2),
                    textY = height * 1.46 / 2;
                        
                    ctx.fillText(text, textX, textY);
                    ctx.save();
                }
            }],
        });

        function GenerateLegend() {
            // Get legend parent
            const chartBox = document.getElementById('chartBox');
            // Create Div
            const div = document.createElement('div');
            div.setAttribute('id', 'customLegend');

            // Create UL
            const ul = document.createElement('ul');
            
            // Generate Arrays
            const titles = {
                    @for(int i=0;i<Model.ProjectTitles.Count;++i)
                    {
                        <text>@i: '@Model.ProjectTitles[i]',</text>
                    }
            };
            const colors = {
                    @for (int i = 0; i < Model.ProjectTitles.Count; ++i)
                    {
                        <text>@i: '@Model.ProjectColors[i]',</text>
                    }
            };

            // access dataset values
            myChart.data.datasets.forEach((dataset, index) => {
                const text = titles[index];
                const bgColor = colors[index];

                dataset.backgroundColor[0] = bgColor;
                
                // create li in foreach loop
                const li = document.createElement('li');
                
                // span colorbox
                const spanBox = document.createElement('span');
                //spanBox.style.borderColor = bColor;
                spanBox.style.backgroundColor = bgColor;

                // p + text
                const p = document.createElement('p');
                const textNode = document.createTextNode(text);

                li.onclick = (click) => {
                    dataset.hidden = !dataset.hidden;

                    UpdateLegend(click);
                };

                ul.appendChild(li);
                li.appendChild(spanBox);
                li.appendChild(p);
                p.appendChild(textNode);

            });

            // Insert div as child
            chartBox.appendChild(div);
            div.append(ul);
        };

        function UpdateLegend(click) {
            const element = click.target.parentNode;
            element.classList.toggle('dim');
            myChart.update();
        }

        GenerateLegend();
    });
</script>

}